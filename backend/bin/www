#!/usr/bin/env node

import app from '../app.js';
import http from 'http';
import debugLib from 'debug';

const debug = debugLib('backend:server');
/**
 * Obtenemos el puerto desde variables de ambiente o por default local 5000.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Creamos el servidor HTTP.
 */

const server = http.createServer(app);

/**
 * Se ecucha en el puerto seteado anteriormente.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Se normaliza el puerto a un nÃºmero, string o en su defecto a falso.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener de los errores del servidor HTTP.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener del evento  "listening" del servidor HTTP.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Servidor escuchando en http://localhost:${addr.port}/api/v1`);
}
